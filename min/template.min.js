Lapiz.Module("Template",["Collections"],function($L){var self=$L.Namespace();$L.set($L,"Template",self.namespace);var std=$L.Namespace();self.set("Std",std.namespace);var _tokenRe=/\$(\w+(?:\.\w+)*|\$)/;var _singleTokenRe=/^\$(\w+(?:\.\w+)*|\$)$/;std.meth(function tokenizer(template,ctx,resolver){template=Lapiz.parse.string(template);var token,val,structure,i,l;var singleToken=_singleTokenRe.exec(template);var out=template;if(singleToken){return resolver(singleToken[1],ctx);}
while(!!(token=_tokenRe.exec(template))){val=resolver(token[1],ctx);if(val===undefined){val="";}
out=out.replace(token[0],val);template=template.replace(token[0],"");}
return out;});std.meth(function resolver(token,ctx){if(token==="$"){return ctx;}
var val,l,i;token=token.split(".");l=token.length;for(i=0;i<l;i+=1){if(ctx===undefined){return ctx;}
ctx=ctx[token[i]];}
return ctx;});self.meth(function Templator(tokenizer,resolver){function tpltr(template,ctx){return tokenizer(template,ctx,resolver);};$L.set(tpltr,"resolver",resolver);$L.set(tpltr,"tokenizer",tokenizer);return tpltr;});std.set("templator",$L.Template.Templator($L.Template.Std.tokenizer,$L.Template.Std.resolver));Object.freeze(self.Std);Object.freeze(self);});